name: Component - Build Images

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - "**.md"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: otel-demo

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - accountingservice
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - featureflagservice
          - frauddetectionservice
          - frontend
          - inventoryservice
          - loadgenerator
          - paymentservice
          - productcatalogservice
          - quoteservice
          - recommendationservice
          - shippingservice

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMPONENT: ${{ matrix.component }}
        run: |
          # Extract version from package.json if it exists, otherwise use git SHA
          VERSION=""
          if [ -f "$COMPONENT/package.json" ]; then
            VERSION=$(cat $COMPONENT/package.json | jq -r .version)
          else
            VERSION=${{ github.sha }}
          fi

          # Build and push using buildx
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}-${COMPONENT}:${VERSION} \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}-${COMPONENT}:latest \
            -f ${COMPONENT}/Dockerfile \
            .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name otel-demo --region ${{ env.AWS_REGION }}

      - name: Update Kubernetes manifests
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Update image references in Kubernetes manifests
          for file in kubernetes/*.yaml; do
            if [ -f "$file" ]; then
              sed -i "s|image: otel/|image: ${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}-|g" "$file"
            fi
          done

      - name: Deploy to EKS
        run: |
          kubectl apply -f kubernetes/ -n otel-demo

      - name: Verify deployment
        run: |
          for COMPONENT in "accountingservice" "adservice" "cartservice" "checkoutservice" "currencyservice" "emailservice" "featureflagservice" "frauddetectionservice" "frontend" "inventoryservice" "loadgenerator" "paymentservice" "productcatalogservice" "quoteservice" "recommendationservice" "shippingservice"; do
            echo "Verifying $COMPONENT..."
            kubectl rollout status deployment/$COMPONENT -n otel-demo --timeout=300s
          done

      - name: Rollback on failure
        if: failure()
        run: |
          for COMPONENT in "accountingservice" "adservice" "cartservice" "checkoutservice" "currencyservice" "emailservice" "featureflagservice" "frauddetectionservice" "frontend" "inventoryservice" "loadgenerator" "paymentservice" "productcatalogservice" "quoteservice" "recommendationservice" "shippingservice"; do
            kubectl rollout undo deployment/$COMPONENT -n otel-demo
          done 